/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TournamentManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_PERCENTAGE"
      | "completeTournament"
      | "createTournament"
      | "gameToken"
      | "joinTournament"
      | "owner"
      | "renounceOwnership"
      | "tournamentCounter"
      | "tournaments"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PlayerJoined"
      | "RevenueBurned"
      | "TournamentCompleted"
      | "TournamentCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeTournament",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTournament",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinTournament",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tournamentCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tournaments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournamentCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournaments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [tournamentId: BigNumberish, player: AddressLike];
  export type OutputTuple = [tournamentId: bigint, player: string];
  export interface OutputObject {
    tournamentId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenueBurnedEvent {
  export type InputTuple = [tournamentId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [tournamentId: bigint, amount: bigint];
  export interface OutputObject {
    tournamentId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TournamentCompletedEvent {
  export type InputTuple = [tournamentId: BigNumberish, winners: AddressLike[]];
  export type OutputTuple = [tournamentId: bigint, winners: string[]];
  export interface OutputObject {
    tournamentId: bigint;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TournamentCreatedEvent {
  export type InputTuple = [
    tournamentId: BigNumberish,
    name: string,
    entryFee: BigNumberish
  ];
  export type OutputTuple = [
    tournamentId: bigint,
    name: string,
    entryFee: bigint
  ];
  export interface OutputObject {
    tournamentId: bigint;
    name: string;
    entryFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TournamentManager extends BaseContract {
  connect(runner?: ContractRunner | null): TournamentManager;
  waitForDeployment(): Promise<this>;

  interface: TournamentManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  completeTournament: TypedContractMethod<
    [
      _tournamentId: BigNumberish,
      _winners: AddressLike[],
      _payouts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  createTournament: TypedContractMethod<
    [
      _name: string,
      _entryFee: BigNumberish,
      _maxParticipants: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  gameToken: TypedContractMethod<[], [string], "view">;

  joinTournament: TypedContractMethod<
    [_tournamentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tournamentCounter: TypedContractMethod<[], [bigint], "view">;

  tournaments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        name: string;
        entryFee: bigint;
        prizePool: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeTournament"
  ): TypedContractMethod<
    [
      _tournamentId: BigNumberish,
      _winners: AddressLike[],
      _payouts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTournament"
  ): TypedContractMethod<
    [
      _name: string,
      _entryFee: BigNumberish,
      _maxParticipants: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gameToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "joinTournament"
  ): TypedContractMethod<[_tournamentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tournamentCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tournaments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        name: string;
        entryFee: bigint;
        prizePool: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RevenueBurned"
  ): TypedContractEvent<
    RevenueBurnedEvent.InputTuple,
    RevenueBurnedEvent.OutputTuple,
    RevenueBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TournamentCompleted"
  ): TypedContractEvent<
    TournamentCompletedEvent.InputTuple,
    TournamentCompletedEvent.OutputTuple,
    TournamentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TournamentCreated"
  ): TypedContractEvent<
    TournamentCreatedEvent.InputTuple,
    TournamentCreatedEvent.OutputTuple,
    TournamentCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerJoined(uint256,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "RevenueBurned(uint256,uint256)": TypedContractEvent<
      RevenueBurnedEvent.InputTuple,
      RevenueBurnedEvent.OutputTuple,
      RevenueBurnedEvent.OutputObject
    >;
    RevenueBurned: TypedContractEvent<
      RevenueBurnedEvent.InputTuple,
      RevenueBurnedEvent.OutputTuple,
      RevenueBurnedEvent.OutputObject
    >;

    "TournamentCompleted(uint256,address[])": TypedContractEvent<
      TournamentCompletedEvent.InputTuple,
      TournamentCompletedEvent.OutputTuple,
      TournamentCompletedEvent.OutputObject
    >;
    TournamentCompleted: TypedContractEvent<
      TournamentCompletedEvent.InputTuple,
      TournamentCompletedEvent.OutputTuple,
      TournamentCompletedEvent.OutputObject
    >;

    "TournamentCreated(uint256,string,uint256)": TypedContractEvent<
      TournamentCreatedEvent.InputTuple,
      TournamentCreatedEvent.OutputTuple,
      TournamentCreatedEvent.OutputObject
    >;
    TournamentCreated: TypedContractEvent<
      TournamentCreatedEvent.InputTuple,
      TournamentCreatedEvent.OutputTuple,
      TournamentCreatedEvent.OutputObject
    >;
  };
}
